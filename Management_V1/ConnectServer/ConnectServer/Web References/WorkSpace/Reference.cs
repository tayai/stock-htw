//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace ConnectServer.WorkSpace {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback setPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback setWorkspaceConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOfficeSpaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocument_LastVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateDatabaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateColumnOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectByColumnAndWhereOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllColumnByWhereOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllByColumnOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectLastDocumentOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::ConnectServer.Properties.Settings.Default.ConnectServer_WorkSpace_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getErrorCompletedEventHandler getErrorCompleted;
        
        /// <remarks/>
        public event setPathCompletedEventHandler setPathCompleted;
        
        /// <remarks/>
        public event setWorkspaceConfigCompletedEventHandler setWorkspaceConfigCompleted;
        
        /// <remarks/>
        public event CreateOfficeSpaceCompletedEventHandler CreateOfficeSpaceCompleted;
        
        /// <remarks/>
        public event SaveDocumentCompletedEventHandler SaveDocumentCompleted;
        
        /// <remarks/>
        public event GetDocument_LastVersionCompletedEventHandler GetDocument_LastVersionCompleted;
        
        /// <remarks/>
        public event CreateDatabaseCompletedEventHandler CreateDatabaseCompleted;
        
        /// <remarks/>
        public event CreateTableCompletedEventHandler CreateTableCompleted;
        
        /// <remarks/>
        public event CreateColumnCompletedEventHandler CreateColumnCompleted;
        
        /// <remarks/>
        public event InsertDataCompletedEventHandler InsertDataCompleted;
        
        /// <remarks/>
        public event UpdateDataCompletedEventHandler UpdateDataCompleted;
        
        /// <remarks/>
        public event SelectByColumnAndWhereCompletedEventHandler SelectByColumnAndWhereCompleted;
        
        /// <remarks/>
        public event SelectAllColumnByWhereCompletedEventHandler SelectAllColumnByWhereCompleted;
        
        /// <remarks/>
        public event SelectAllByColumnCompletedEventHandler SelectAllByColumnCompleted;
        
        /// <remarks/>
        public event SelectAllCompletedEventHandler SelectAllCompleted;
        
        /// <remarks/>
        public event updateTableCompletedEventHandler updateTableCompleted;
        
        /// <remarks/>
        public event SelectLastDocumentCompletedEventHandler SelectLastDocumentCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getError", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getError() {
            object[] results = this.Invoke("getError", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getErrorAsync() {
            this.getErrorAsync(null);
        }
        
        /// <remarks/>
        public void getErrorAsync(object userState) {
            if ((this.getErrorOperationCompleted == null)) {
                this.getErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetErrorOperationCompleted);
            }
            this.InvokeAsync("getError", new object[0], this.getErrorOperationCompleted, userState);
        }
        
        private void OngetErrorOperationCompleted(object arg) {
            if ((this.getErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getErrorCompleted(this, new getErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setPath", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool setPath(string Password, string PathStore) {
            object[] results = this.Invoke("setPath", new object[] {
                        Password,
                        PathStore});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void setPathAsync(string Password, string PathStore) {
            this.setPathAsync(Password, PathStore, null);
        }
        
        /// <remarks/>
        public void setPathAsync(string Password, string PathStore, object userState) {
            if ((this.setPathOperationCompleted == null)) {
                this.setPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetPathOperationCompleted);
            }
            this.InvokeAsync("setPath", new object[] {
                        Password,
                        PathStore}, this.setPathOperationCompleted, userState);
        }
        
        private void OnsetPathOperationCompleted(object arg) {
            if ((this.setPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setPathCompleted(this, new setPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setWorkspaceConfig", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool setWorkspaceConfig(string Password, string strWorkspace) {
            object[] results = this.Invoke("setWorkspaceConfig", new object[] {
                        Password,
                        strWorkspace});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void setWorkspaceConfigAsync(string Password, string strWorkspace) {
            this.setWorkspaceConfigAsync(Password, strWorkspace, null);
        }
        
        /// <remarks/>
        public void setWorkspaceConfigAsync(string Password, string strWorkspace, object userState) {
            if ((this.setWorkspaceConfigOperationCompleted == null)) {
                this.setWorkspaceConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetWorkspaceConfigOperationCompleted);
            }
            this.InvokeAsync("setWorkspaceConfig", new object[] {
                        Password,
                        strWorkspace}, this.setWorkspaceConfigOperationCompleted, userState);
        }
        
        private void OnsetWorkspaceConfigOperationCompleted(object arg) {
            if ((this.setWorkspaceConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setWorkspaceConfigCompleted(this, new setWorkspaceConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateOfficeSpace", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] CreateOfficeSpace(string Connection, string OfficeSpaceId) {
            object[] results = this.Invoke("CreateOfficeSpace", new object[] {
                        Connection,
                        OfficeSpaceId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void CreateOfficeSpaceAsync(string Connection, string OfficeSpaceId) {
            this.CreateOfficeSpaceAsync(Connection, OfficeSpaceId, null);
        }
        
        /// <remarks/>
        public void CreateOfficeSpaceAsync(string Connection, string OfficeSpaceId, object userState) {
            if ((this.CreateOfficeSpaceOperationCompleted == null)) {
                this.CreateOfficeSpaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOfficeSpaceOperationCompleted);
            }
            this.InvokeAsync("CreateOfficeSpace", new object[] {
                        Connection,
                        OfficeSpaceId}, this.CreateOfficeSpaceOperationCompleted, userState);
        }
        
        private void OnCreateOfficeSpaceOperationCompleted(object arg) {
            if ((this.CreateOfficeSpaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOfficeSpaceCompleted(this, new CreateOfficeSpaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveDocument(string OfficeSpaceId, string ObjectId, string ItemId, string strDocument) {
            object[] results = this.Invoke("SaveDocument", new object[] {
                        OfficeSpaceId,
                        ObjectId,
                        ItemId,
                        strDocument});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveDocumentAsync(string OfficeSpaceId, string ObjectId, string ItemId, string strDocument) {
            this.SaveDocumentAsync(OfficeSpaceId, ObjectId, ItemId, strDocument, null);
        }
        
        /// <remarks/>
        public void SaveDocumentAsync(string OfficeSpaceId, string ObjectId, string ItemId, string strDocument, object userState) {
            if ((this.SaveDocumentOperationCompleted == null)) {
                this.SaveDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveDocumentOperationCompleted);
            }
            this.InvokeAsync("SaveDocument", new object[] {
                        OfficeSpaceId,
                        ObjectId,
                        ItemId,
                        strDocument}, this.SaveDocumentOperationCompleted, userState);
        }
        
        private void OnSaveDocumentOperationCompleted(object arg) {
            if ((this.SaveDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveDocumentCompleted(this, new SaveDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocument_LastVersion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocument_LastVersion(string OfficeSpaceId, string ObjectId, string ItemId) {
            object[] results = this.Invoke("GetDocument_LastVersion", new object[] {
                        OfficeSpaceId,
                        ObjectId,
                        ItemId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocument_LastVersionAsync(string OfficeSpaceId, string ObjectId, string ItemId) {
            this.GetDocument_LastVersionAsync(OfficeSpaceId, ObjectId, ItemId, null);
        }
        
        /// <remarks/>
        public void GetDocument_LastVersionAsync(string OfficeSpaceId, string ObjectId, string ItemId, object userState) {
            if ((this.GetDocument_LastVersionOperationCompleted == null)) {
                this.GetDocument_LastVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocument_LastVersionOperationCompleted);
            }
            this.InvokeAsync("GetDocument_LastVersion", new object[] {
                        OfficeSpaceId,
                        ObjectId,
                        ItemId}, this.GetDocument_LastVersionOperationCompleted, userState);
        }
        
        private void OnGetDocument_LastVersionOperationCompleted(object arg) {
            if ((this.GetDocument_LastVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocument_LastVersionCompleted(this, new GetDocument_LastVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateDatabase", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] CreateDatabase(string Connection, string OfficeSpaceId, string DatabaseName) {
            object[] results = this.Invoke("CreateDatabase", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void CreateDatabaseAsync(string Connection, string OfficeSpaceId, string DatabaseName) {
            this.CreateDatabaseAsync(Connection, OfficeSpaceId, DatabaseName, null);
        }
        
        /// <remarks/>
        public void CreateDatabaseAsync(string Connection, string OfficeSpaceId, string DatabaseName, object userState) {
            if ((this.CreateDatabaseOperationCompleted == null)) {
                this.CreateDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateDatabaseOperationCompleted);
            }
            this.InvokeAsync("CreateDatabase", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName}, this.CreateDatabaseOperationCompleted, userState);
        }
        
        private void OnCreateDatabaseOperationCompleted(object arg) {
            if ((this.CreateDatabaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateDatabaseCompleted(this, new CreateDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] CreateTable(string Connection, string OfficeSpaceId, string DatabaseName, string TableName) {
            object[] results = this.Invoke("CreateTable", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void CreateTableAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName) {
            this.CreateTableAsync(Connection, OfficeSpaceId, DatabaseName, TableName, null);
        }
        
        /// <remarks/>
        public void CreateTableAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, object userState) {
            if ((this.CreateTableOperationCompleted == null)) {
                this.CreateTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTableOperationCompleted);
            }
            this.InvokeAsync("CreateTable", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName}, this.CreateTableOperationCompleted, userState);
        }
        
        private void OnCreateTableOperationCompleted(object arg) {
            if ((this.CreateTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTableCompleted(this, new CreateTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateColumn", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] CreateColumn(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string ColumnName, string Detail, NColumnType NCType) {
            object[] results = this.Invoke("CreateColumn", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName,
                        ColumnName,
                        Detail,
                        NCType});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void CreateColumnAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string ColumnName, string Detail, NColumnType NCType) {
            this.CreateColumnAsync(Connection, OfficeSpaceId, DatabaseName, TableName, ColumnName, Detail, NCType, null);
        }
        
        /// <remarks/>
        public void CreateColumnAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string ColumnName, string Detail, NColumnType NCType, object userState) {
            if ((this.CreateColumnOperationCompleted == null)) {
                this.CreateColumnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateColumnOperationCompleted);
            }
            this.InvokeAsync("CreateColumn", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName,
                        ColumnName,
                        Detail,
                        NCType}, this.CreateColumnOperationCompleted, userState);
        }
        
        private void OnCreateColumnOperationCompleted(object arg) {
            if ((this.CreateColumnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateColumnCompleted(this, new CreateColumnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] InsertData(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string NColumns_String, string strDOC, string User) {
            object[] results = this.Invoke("InsertData", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName,
                        NColumns_String,
                        strDOC,
                        User});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void InsertDataAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string NColumns_String, string strDOC, string User) {
            this.InsertDataAsync(Connection, OfficeSpaceId, DatabaseName, TableName, NColumns_String, strDOC, User, null);
        }
        
        /// <remarks/>
        public void InsertDataAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string NColumns_String, string strDOC, string User, object userState) {
            if ((this.InsertDataOperationCompleted == null)) {
                this.InsertDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDataOperationCompleted);
            }
            this.InvokeAsync("InsertData", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName,
                        NColumns_String,
                        strDOC,
                        User}, this.InsertDataOperationCompleted, userState);
        }
        
        private void OnInsertDataOperationCompleted(object arg) {
            if ((this.InsertDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDataCompleted(this, new InsertDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] UpdateData(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string NColumns_String, string NWheres_String, string strDOC, string User) {
            object[] results = this.Invoke("UpdateData", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName,
                        NColumns_String,
                        NWheres_String,
                        strDOC,
                        User});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDataAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string NColumns_String, string NWheres_String, string strDOC, string User) {
            this.UpdateDataAsync(Connection, OfficeSpaceId, DatabaseName, TableName, NColumns_String, NWheres_String, strDOC, User, null);
        }
        
        /// <remarks/>
        public void UpdateDataAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string NColumns_String, string NWheres_String, string strDOC, string User, object userState) {
            if ((this.UpdateDataOperationCompleted == null)) {
                this.UpdateDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDataOperationCompleted);
            }
            this.InvokeAsync("UpdateData", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName,
                        NColumns_String,
                        NWheres_String,
                        strDOC,
                        User}, this.UpdateDataOperationCompleted, userState);
        }
        
        private void OnUpdateDataOperationCompleted(object arg) {
            if ((this.UpdateDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDataCompleted(this, new UpdateDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectByColumnAndWhere", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable SelectByColumnAndWhere(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string NColumns_String, string NWheres_String, string User) {
            object[] results = this.Invoke("SelectByColumnAndWhere", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName,
                        NColumns_String,
                        NWheres_String,
                        User});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void SelectByColumnAndWhereAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string NColumns_String, string NWheres_String, string User) {
            this.SelectByColumnAndWhereAsync(Connection, OfficeSpaceId, DatabaseName, TableName, NColumns_String, NWheres_String, User, null);
        }
        
        /// <remarks/>
        public void SelectByColumnAndWhereAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string NColumns_String, string NWheres_String, string User, object userState) {
            if ((this.SelectByColumnAndWhereOperationCompleted == null)) {
                this.SelectByColumnAndWhereOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectByColumnAndWhereOperationCompleted);
            }
            this.InvokeAsync("SelectByColumnAndWhere", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName,
                        NColumns_String,
                        NWheres_String,
                        User}, this.SelectByColumnAndWhereOperationCompleted, userState);
        }
        
        private void OnSelectByColumnAndWhereOperationCompleted(object arg) {
            if ((this.SelectByColumnAndWhereCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectByColumnAndWhereCompleted(this, new SelectByColumnAndWhereCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectAllColumnByWhere", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable SelectAllColumnByWhere(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string NWheres_String, string User) {
            object[] results = this.Invoke("SelectAllColumnByWhere", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName,
                        NWheres_String,
                        User});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllColumnByWhereAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string NWheres_String, string User) {
            this.SelectAllColumnByWhereAsync(Connection, OfficeSpaceId, DatabaseName, TableName, NWheres_String, User, null);
        }
        
        /// <remarks/>
        public void SelectAllColumnByWhereAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string NWheres_String, string User, object userState) {
            if ((this.SelectAllColumnByWhereOperationCompleted == null)) {
                this.SelectAllColumnByWhereOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllColumnByWhereOperationCompleted);
            }
            this.InvokeAsync("SelectAllColumnByWhere", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName,
                        NWheres_String,
                        User}, this.SelectAllColumnByWhereOperationCompleted, userState);
        }
        
        private void OnSelectAllColumnByWhereOperationCompleted(object arg) {
            if ((this.SelectAllColumnByWhereCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllColumnByWhereCompleted(this, new SelectAllColumnByWhereCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectAllByColumn", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable SelectAllByColumn(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string NColumns_String, string User) {
            object[] results = this.Invoke("SelectAllByColumn", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName,
                        NColumns_String,
                        User});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllByColumnAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string NColumns_String, string User) {
            this.SelectAllByColumnAsync(Connection, OfficeSpaceId, DatabaseName, TableName, NColumns_String, User, null);
        }
        
        /// <remarks/>
        public void SelectAllByColumnAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string NColumns_String, string User, object userState) {
            if ((this.SelectAllByColumnOperationCompleted == null)) {
                this.SelectAllByColumnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllByColumnOperationCompleted);
            }
            this.InvokeAsync("SelectAllByColumn", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName,
                        NColumns_String,
                        User}, this.SelectAllByColumnOperationCompleted, userState);
        }
        
        private void OnSelectAllByColumnOperationCompleted(object arg) {
            if ((this.SelectAllByColumnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllByColumnCompleted(this, new SelectAllByColumnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectAll", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable SelectAll(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string User) {
            object[] results = this.Invoke("SelectAll", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName,
                        User});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string User) {
            this.SelectAllAsync(Connection, OfficeSpaceId, DatabaseName, TableName, User, null);
        }
        
        /// <remarks/>
        public void SelectAllAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, string User, object userState) {
            if ((this.SelectAllOperationCompleted == null)) {
                this.SelectAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllOperationCompleted);
            }
            this.InvokeAsync("SelectAll", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName,
                        User}, this.SelectAllOperationCompleted, userState);
        }
        
        private void OnSelectAllOperationCompleted(object arg) {
            if ((this.SelectAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllCompleted(this, new SelectAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] updateTable(string Connection, string OfficeSpaceId, string ItemId, string DatabaseName, string TableName, string strData, string User) {
            object[] results = this.Invoke("updateTable", new object[] {
                        Connection,
                        OfficeSpaceId,
                        ItemId,
                        DatabaseName,
                        TableName,
                        strData,
                        User});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void updateTableAsync(string Connection, string OfficeSpaceId, string ItemId, string DatabaseName, string TableName, string strData, string User) {
            this.updateTableAsync(Connection, OfficeSpaceId, ItemId, DatabaseName, TableName, strData, User, null);
        }
        
        /// <remarks/>
        public void updateTableAsync(string Connection, string OfficeSpaceId, string ItemId, string DatabaseName, string TableName, string strData, string User, object userState) {
            if ((this.updateTableOperationCompleted == null)) {
                this.updateTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateTableOperationCompleted);
            }
            this.InvokeAsync("updateTable", new object[] {
                        Connection,
                        OfficeSpaceId,
                        ItemId,
                        DatabaseName,
                        TableName,
                        strData,
                        User}, this.updateTableOperationCompleted, userState);
        }
        
        private void OnupdateTableOperationCompleted(object arg) {
            if ((this.updateTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateTableCompleted(this, new updateTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectLastDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SelectLastDocument(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, int ItemId, string User) {
            object[] results = this.Invoke("SelectLastDocument", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName,
                        ItemId,
                        User});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SelectLastDocumentAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, int ItemId, string User) {
            this.SelectLastDocumentAsync(Connection, OfficeSpaceId, DatabaseName, TableName, ItemId, User, null);
        }
        
        /// <remarks/>
        public void SelectLastDocumentAsync(string Connection, string OfficeSpaceId, string DatabaseName, string TableName, int ItemId, string User, object userState) {
            if ((this.SelectLastDocumentOperationCompleted == null)) {
                this.SelectLastDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectLastDocumentOperationCompleted);
            }
            this.InvokeAsync("SelectLastDocument", new object[] {
                        Connection,
                        OfficeSpaceId,
                        DatabaseName,
                        TableName,
                        ItemId,
                        User}, this.SelectLastDocumentOperationCompleted, userState);
        }
        
        private void OnSelectLastDocumentOperationCompleted(object arg) {
            if ((this.SelectLastDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectLastDocumentCompleted(this, new SelectLastDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum NColumnType {
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        Xml,
        
        /// <remarks/>
        Integer,
        
        /// <remarks/>
        Varchar,
        
        /// <remarks/>
        Datetime,
        
        /// <remarks/>
        Decimal,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getErrorCompletedEventHandler(object sender, getErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setPathCompletedEventHandler(object sender, setPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setWorkspaceConfigCompletedEventHandler(object sender, setWorkspaceConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setWorkspaceConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setWorkspaceConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CreateOfficeSpaceCompletedEventHandler(object sender, CreateOfficeSpaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOfficeSpaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOfficeSpaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SaveDocumentCompletedEventHandler(object sender, SaveDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDocument_LastVersionCompletedEventHandler(object sender, GetDocument_LastVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocument_LastVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocument_LastVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CreateDatabaseCompletedEventHandler(object sender, CreateDatabaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CreateTableCompletedEventHandler(object sender, CreateTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CreateColumnCompletedEventHandler(object sender, CreateColumnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateColumnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateColumnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertDataCompletedEventHandler(object sender, InsertDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateDataCompletedEventHandler(object sender, UpdateDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectByColumnAndWhereCompletedEventHandler(object sender, SelectByColumnAndWhereCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectByColumnAndWhereCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectByColumnAndWhereCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectAllColumnByWhereCompletedEventHandler(object sender, SelectAllColumnByWhereCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllColumnByWhereCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllColumnByWhereCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectAllByColumnCompletedEventHandler(object sender, SelectAllByColumnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllByColumnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllByColumnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectAllCompletedEventHandler(object sender, SelectAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void updateTableCompletedEventHandler(object sender, updateTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SelectLastDocumentCompletedEventHandler(object sender, SelectLastDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectLastDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectLastDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591