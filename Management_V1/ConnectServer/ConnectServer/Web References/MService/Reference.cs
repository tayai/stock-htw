//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
// 
#pragma warning disable 1591

namespace ConnectServer.MService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UpdateParameterArrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback ErrorLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDATA123OperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDATAOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback splSurveyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteSqlTransactionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::ConnectServer.Properties.Settings.Default.ConnectServer_MService_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UpdateParameterArrayCompletedEventHandler UpdateParameterArrayCompleted;
        
        /// <remarks/>
        public event ErrorLogCompletedEventHandler ErrorLogCompleted;
        
        /// <remarks/>
        public event SelectDataCompletedEventHandler SelectDataCompleted;
        
        /// <remarks/>
        public event ExecuteCompletedEventHandler ExecuteCompleted;
        
        /// <remarks/>
        public event InsertDataCompletedEventHandler InsertDataCompleted;
        
        /// <remarks/>
        public event UpdateDATA123CompletedEventHandler UpdateDATA123Completed;
        
        /// <remarks/>
        public event UpdateDATACompletedEventHandler UpdateDATACompleted;
        
        /// <remarks/>
        public event UpdateParameterCompletedEventHandler UpdateParameterCompleted;
        
        /// <remarks/>
        public event UpdateDataCompletedEventHandler UpdateDataCompleted;
        
        /// <remarks/>
        public event ReadXMLCompletedEventHandler ReadXMLCompleted;
        
        /// <remarks/>
        public event splSurveyCompletedEventHandler splSurveyCompleted;
        
        /// <remarks/>
        public event ExecuteSqlTransactionCompletedEventHandler ExecuteSqlTransactionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateParameterArray", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateParameterArray(string[] sql, object[] data, object[] paramname, string strConnect) {
            object[] results = this.Invoke("UpdateParameterArray", new object[] {
                        sql,
                        data,
                        paramname,
                        strConnect});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateParameterArrayAsync(string[] sql, object[] data, object[] paramname, string strConnect) {
            this.UpdateParameterArrayAsync(sql, data, paramname, strConnect, null);
        }
        
        /// <remarks/>
        public void UpdateParameterArrayAsync(string[] sql, object[] data, object[] paramname, string strConnect, object userState) {
            if ((this.UpdateParameterArrayOperationCompleted == null)) {
                this.UpdateParameterArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateParameterArrayOperationCompleted);
            }
            this.InvokeAsync("UpdateParameterArray", new object[] {
                        sql,
                        data,
                        paramname,
                        strConnect}, this.UpdateParameterArrayOperationCompleted, userState);
        }
        
        private void OnUpdateParameterArrayOperationCompleted(object arg) {
            if ((this.UpdateParameterArrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateParameterArrayCompleted(this, new UpdateParameterArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ErrorLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ErrorLog() {
            object[] results = this.Invoke("ErrorLog", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ErrorLogAsync() {
            this.ErrorLogAsync(null);
        }
        
        /// <remarks/>
        public void ErrorLogAsync(object userState) {
            if ((this.ErrorLogOperationCompleted == null)) {
                this.ErrorLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnErrorLogOperationCompleted);
            }
            this.InvokeAsync("ErrorLog", new object[0], this.ErrorLogOperationCompleted, userState);
        }
        
        private void OnErrorLogOperationCompleted(object arg) {
            if ((this.ErrorLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ErrorLogCompleted(this, new ErrorLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectData(string SQL, string strConnect) {
            object[] results = this.Invoke("SelectData", new object[] {
                        SQL,
                        strConnect});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectDataAsync(string SQL, string strConnect) {
            this.SelectDataAsync(SQL, strConnect, null);
        }
        
        /// <remarks/>
        public void SelectDataAsync(string SQL, string strConnect, object userState) {
            if ((this.SelectDataOperationCompleted == null)) {
                this.SelectDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectDataOperationCompleted);
            }
            this.InvokeAsync("SelectData", new object[] {
                        SQL,
                        strConnect}, this.SelectDataOperationCompleted, userState);
        }
        
        private void OnSelectDataOperationCompleted(object arg) {
            if ((this.SelectDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectDataCompleted(this, new SelectDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Execute", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Execute(string SQL, string strConnect, out string ErrorMsg) {
            object[] results = this.Invoke("Execute", new object[] {
                        SQL,
                        strConnect});
            ErrorMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteAsync(string SQL, string strConnect) {
            this.ExecuteAsync(SQL, strConnect, null);
        }
        
        /// <remarks/>
        public void ExecuteAsync(string SQL, string strConnect, object userState) {
            if ((this.ExecuteOperationCompleted == null)) {
                this.ExecuteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteOperationCompleted);
            }
            this.InvokeAsync("Execute", new object[] {
                        SQL,
                        strConnect}, this.ExecuteOperationCompleted, userState);
        }
        
        private void OnExecuteOperationCompleted(object arg) {
            if ((this.ExecuteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteCompleted(this, new ExecuteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertData(string SQL, string strConnect) {
            object[] results = this.Invoke("InsertData", new object[] {
                        SQL,
                        strConnect});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertDataAsync(string SQL, string strConnect) {
            this.InsertDataAsync(SQL, strConnect, null);
        }
        
        /// <remarks/>
        public void InsertDataAsync(string SQL, string strConnect, object userState) {
            if ((this.InsertDataOperationCompleted == null)) {
                this.InsertDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDataOperationCompleted);
            }
            this.InvokeAsync("InsertData", new object[] {
                        SQL,
                        strConnect}, this.InsertDataOperationCompleted, userState);
        }
        
        private void OnInsertDataOperationCompleted(object arg) {
            if ((this.InsertDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDataCompleted(this, new InsertDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDATA123", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateDATA123(string SQL, string Parameter, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] img, string Parameter2, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] img2, string strConnect) {
            object[] results = this.Invoke("UpdateDATA123", new object[] {
                        SQL,
                        Parameter,
                        img,
                        Parameter2,
                        img2,
                        strConnect});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDATA123Async(string SQL, string Parameter, byte[] img, string Parameter2, byte[] img2, string strConnect) {
            this.UpdateDATA123Async(SQL, Parameter, img, Parameter2, img2, strConnect, null);
        }
        
        /// <remarks/>
        public void UpdateDATA123Async(string SQL, string Parameter, byte[] img, string Parameter2, byte[] img2, string strConnect, object userState) {
            if ((this.UpdateDATA123OperationCompleted == null)) {
                this.UpdateDATA123OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDATA123OperationCompleted);
            }
            this.InvokeAsync("UpdateDATA123", new object[] {
                        SQL,
                        Parameter,
                        img,
                        Parameter2,
                        img2,
                        strConnect}, this.UpdateDATA123OperationCompleted, userState);
        }
        
        private void OnUpdateDATA123OperationCompleted(object arg) {
            if ((this.UpdateDATA123Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDATA123Completed(this, new UpdateDATA123CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDATA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateDATA(string SQL, string Parameter, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] img, string strConnect) {
            object[] results = this.Invoke("UpdateDATA", new object[] {
                        SQL,
                        Parameter,
                        img,
                        strConnect});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDATAAsync(string SQL, string Parameter, byte[] img, string strConnect) {
            this.UpdateDATAAsync(SQL, Parameter, img, strConnect, null);
        }
        
        /// <remarks/>
        public void UpdateDATAAsync(string SQL, string Parameter, byte[] img, string strConnect, object userState) {
            if ((this.UpdateDATAOperationCompleted == null)) {
                this.UpdateDATAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDATAOperationCompleted);
            }
            this.InvokeAsync("UpdateDATA", new object[] {
                        SQL,
                        Parameter,
                        img,
                        strConnect}, this.UpdateDATAOperationCompleted, userState);
        }
        
        private void OnUpdateDATAOperationCompleted(object arg) {
            if ((this.UpdateDATACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDATACompleted(this, new UpdateDATACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateParameter", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateParameter(string SQL, string Parameter, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] img, string strConnect) {
            object[] results = this.Invoke("UpdateParameter", new object[] {
                        SQL,
                        Parameter,
                        img,
                        strConnect});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateParameterAsync(string SQL, string Parameter, byte[] img, string strConnect) {
            this.UpdateParameterAsync(SQL, Parameter, img, strConnect, null);
        }
        
        /// <remarks/>
        public void UpdateParameterAsync(string SQL, string Parameter, byte[] img, string strConnect, object userState) {
            if ((this.UpdateParameterOperationCompleted == null)) {
                this.UpdateParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateParameterOperationCompleted);
            }
            this.InvokeAsync("UpdateParameter", new object[] {
                        SQL,
                        Parameter,
                        img,
                        strConnect}, this.UpdateParameterOperationCompleted, userState);
        }
        
        private void OnUpdateParameterOperationCompleted(object arg) {
            if ((this.UpdateParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateParameterCompleted(this, new UpdateParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateData(string SQL, string strConnect) {
            object[] results = this.Invoke("UpdateData", new object[] {
                        SQL,
                        strConnect});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDataAsync(string SQL, string strConnect) {
            this.UpdateDataAsync(SQL, strConnect, null);
        }
        
        /// <remarks/>
        public void UpdateDataAsync(string SQL, string strConnect, object userState) {
            if ((this.UpdateDataOperationCompleted == null)) {
                this.UpdateDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDataOperationCompleted);
            }
            this.InvokeAsync("UpdateData", new object[] {
                        SQL,
                        strConnect}, this.UpdateDataOperationCompleted, userState);
        }
        
        private void OnUpdateDataOperationCompleted(object arg) {
            if ((this.UpdateDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDataCompleted(this, new UpdateDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReadXML", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReadXML(string strConnect, string USER_NAEM, string Password) {
            object[] results = this.Invoke("ReadXML", new object[] {
                        strConnect,
                        USER_NAEM,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReadXMLAsync(string strConnect, string USER_NAEM, string Password) {
            this.ReadXMLAsync(strConnect, USER_NAEM, Password, null);
        }
        
        /// <remarks/>
        public void ReadXMLAsync(string strConnect, string USER_NAEM, string Password, object userState) {
            if ((this.ReadXMLOperationCompleted == null)) {
                this.ReadXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadXMLOperationCompleted);
            }
            this.InvokeAsync("ReadXML", new object[] {
                        strConnect,
                        USER_NAEM,
                        Password}, this.ReadXMLOperationCompleted, userState);
        }
        
        private void OnReadXMLOperationCompleted(object arg) {
            if ((this.ReadXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadXMLCompleted(this, new ReadXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/splSurvey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string splSurvey(string strConnect, string iCommand, string PCODE, int SurveyID, int UnitID, string iStr) {
            object[] results = this.Invoke("splSurvey", new object[] {
                        strConnect,
                        iCommand,
                        PCODE,
                        SurveyID,
                        UnitID,
                        iStr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void splSurveyAsync(string strConnect, string iCommand, string PCODE, int SurveyID, int UnitID, string iStr) {
            this.splSurveyAsync(strConnect, iCommand, PCODE, SurveyID, UnitID, iStr, null);
        }
        
        /// <remarks/>
        public void splSurveyAsync(string strConnect, string iCommand, string PCODE, int SurveyID, int UnitID, string iStr, object userState) {
            if ((this.splSurveyOperationCompleted == null)) {
                this.splSurveyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsplSurveyOperationCompleted);
            }
            this.InvokeAsync("splSurvey", new object[] {
                        strConnect,
                        iCommand,
                        PCODE,
                        SurveyID,
                        UnitID,
                        iStr}, this.splSurveyOperationCompleted, userState);
        }
        
        private void OnsplSurveyOperationCompleted(object arg) {
            if ((this.splSurveyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.splSurveyCompleted(this, new splSurveyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteSqlTransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteSqlTransaction(object[] arr, string strConnect) {
            object[] results = this.Invoke("ExecuteSqlTransaction", new object[] {
                        arr,
                        strConnect});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteSqlTransactionAsync(object[] arr, string strConnect) {
            this.ExecuteSqlTransactionAsync(arr, strConnect, null);
        }
        
        /// <remarks/>
        public void ExecuteSqlTransactionAsync(object[] arr, string strConnect, object userState) {
            if ((this.ExecuteSqlTransactionOperationCompleted == null)) {
                this.ExecuteSqlTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteSqlTransactionOperationCompleted);
            }
            this.InvokeAsync("ExecuteSqlTransaction", new object[] {
                        arr,
                        strConnect}, this.ExecuteSqlTransactionOperationCompleted, userState);
        }
        
        private void OnExecuteSqlTransactionOperationCompleted(object arg) {
            if ((this.ExecuteSqlTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteSqlTransactionCompleted(this, new ExecuteSqlTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateParameterArrayCompletedEventHandler(object sender, UpdateParameterArrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateParameterArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateParameterArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ErrorLogCompletedEventHandler(object sender, ErrorLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ErrorLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ErrorLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SelectDataCompletedEventHandler(object sender, SelectDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ExecuteCompletedEventHandler(object sender, ExecuteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void InsertDataCompletedEventHandler(object sender, InsertDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateDATA123CompletedEventHandler(object sender, UpdateDATA123CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDATA123CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDATA123CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateDATACompletedEventHandler(object sender, UpdateDATACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDATACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDATACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateParameterCompletedEventHandler(object sender, UpdateParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateDataCompletedEventHandler(object sender, UpdateDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ReadXMLCompletedEventHandler(object sender, ReadXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void splSurveyCompletedEventHandler(object sender, splSurveyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class splSurveyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal splSurveyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ExecuteSqlTransactionCompletedEventHandler(object sender, ExecuteSqlTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteSqlTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteSqlTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591